# This workflow will install Python dependencies, run tests and lint with a variety of Python versions,
# run static analysis with Qodana, and deploy reports

name: Build

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.11"] # ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry and dependencies
        run: |
          python -m pip install --upgrade pip
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install

      - name: Run pre-commit checks
        uses: pre-commit/action@v3.0.0

      - name: Run tests
        run: |
          poetry run python -m unittest discover -p 'test_*.py' -t ..
        working-directory: tests

  qodana:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Qodana scan
        uses: JetBrains/qodana-action@main
        with:
          upload-result: false
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}

#      - name: Set scanning alerts
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: ${{ runner.temp }}/qodana/results/qodana.sarif.json

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact-qodana
          path: ${{ runner.temp }}/qodana/results/report/

  sphinx:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install poetry and dependencies
        run: |
          python -m pip install --upgrade pip
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install

      - name: Generate docs
        run: |
          poetry run sphinx-apidoc -o docs .
          poetry run sphinx-build -b html docs docs/_build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact-sphinx
          path: docs/_build/

  coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install poetry and dependencies
        run: |
          python -m pip install --upgrade pip
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install

      - name: Run coverage
        run: |
          poetry run coverage run -m unittest discover
          poetry run coverage html
          rm htmlcov/.gitignore

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact-coverage
          path: htmlcov/

  deploy:
    runs-on: ubuntu-latest
    needs: [ qodana, sphinx, coverage ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifact (qodana)
        uses: actions/download-artifact@v3
        with:
          name: artifact-qodana
          path: build/qodana

      - name: Download artifact (sphinx)
        uses: actions/download-artifact@v3
        with:
          name: artifact-sphinx
          path: build/docs

      - name: Download artifact (coverage)
        uses: actions/download-artifact@v3
        with:
          name: artifact-coverage
          path: build/cov

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build
          destination_dir: ./
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: deploy
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          failOnError: false
          name: |
            artifact-*
